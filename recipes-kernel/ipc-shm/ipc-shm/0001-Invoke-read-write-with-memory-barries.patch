From ccdba1e98a4bca38394beedcb2da5be67608dfac Mon Sep 17 00:00:00 2001
From: George Mocanu <george.mocanu@nxp.com>
Date: Fri, 13 Oct 2023 10:27:01 +0300
Subject: [PATCH] Invoke read/write with memory barries

Issue: GVIP-1171
Signed-off-by: George Mocanu <george.mocanu@nxp.com>
---
 hw/ipc-hw-s32g3xx.c | 18 +++++++++---------
 hw/ipc-hw-s32gen1.c | 18 +++++++++---------
 hw/ipc-hw-s32v234.c | 12 ++++++------
 3 files changed, 24 insertions(+), 24 deletions(-)

diff --git a/hw/ipc-hw-s32g3xx.c b/hw/ipc-hw-s32g3xx.c
index 31633a7..648d9a7 100644
--- a/hw/ipc-hw-s32g3xx.c
+++ b/hw/ipc-hw-s32g3xx.c
@@ -331,7 +331,7 @@ int _ipc_hw_init(const uint8_t instance, int tx_irq, int rx_irq,
 			&& ((tx_irq < IRQ_ID_MIN) || (tx_irq > IRQ_ID_MAX)))
 		|| (rx_irq < IRQ_ID_MIN || rx_irq > IRQ_ID_MAX)
 		|| (rx_irq == tx_irq)
-		|| (remote_core_idx == readl_relaxed(&(priv[instance].mscm->cpxnum)))
+		|| (remote_core_idx == readl(&(priv[instance].mscm->cpxnum)))
 		|| (remote_core_idx == local_core_idx)) {
 		return -EINVAL;
 	}
@@ -349,11 +349,11 @@ int _ipc_hw_init(const uint8_t instance, int tx_irq, int rx_irq,
 	 * enable local trusted cores so that they can read full contents of
 	 * IRCPnISRx registers
 	 */
-	ircpcfg_mask = readl_relaxed(&priv[instance].mscm->ircpcfg);
+	ircpcfg_mask = readl(&priv[instance].mscm->ircpcfg);
 	if (ircpcfg_mask & MSCM_IRCPCFG_LOCK)
 		return -EACCES;
 
-	writel_relaxed(ircpcfg_mask | local_core->trusted, &(priv[instance].mscm->ircpcfg));
+	writel(ircpcfg_mask | local_core->trusted, &(priv[instance].mscm->ircpcfg));
 
 	return 0;
 }
@@ -381,8 +381,8 @@ void ipc_hw_irq_enable(const uint8_t instance)
 	uint16_t irsprc_mask;
 
 	/* enable MSCM core-to-core interrupt routing */
-	irsprc_mask = readw_relaxed(&priv[instance].mscm->irsprc[priv[instance].mscm_rx_irq + 1]);
-	writew_relaxed(irsprc_mask | MSCM_IRSPRCn_GIC500,
+	irsprc_mask = readw(&priv[instance].mscm->irsprc[priv[instance].mscm_rx_irq + 1]);
+	writew(irsprc_mask | MSCM_IRSPRCn_GIC500,
 			&((priv[instance].mscm)->irsprc[priv[instance].mscm_rx_irq + 1]));
 }
 
@@ -402,8 +402,8 @@ void ipc_hw_irq_disable(const uint8_t instance)
 	}
 
 	/* disable MSCM core-to-core interrupt routing */
-	irsprc_mask = readw_relaxed(&priv[instance].mscm->irsprc[priv[instance].mscm_rx_irq + 1]);
-	writew_relaxed(irsprc_mask & ~MSCM_IRSPRCn_GIC500,
+	irsprc_mask = readw(&priv[instance].mscm->irsprc[priv[instance].mscm_rx_irq + 1]);
+	writew(irsprc_mask & ~MSCM_IRSPRCn_GIC500,
 			&((priv[instance].mscm)->irsprc[priv[instance].mscm_rx_irq + 1]));
 }
 
@@ -417,7 +417,7 @@ void ipc_hw_irq_notify(const uint8_t instance)
 	}
 
 	/* trigger MSCM core-to-core directed interrupt */
-	writel_relaxed(MSCM_IRCPnIGRn_INT_EN,
+	writel(MSCM_IRCPnIGRn_INT_EN,
 		&((priv[instance].mscm)->
 		ircpnirx[priv[instance].remote_core][priv[instance].mscm_tx_irq].igr));
 }
@@ -431,7 +431,7 @@ void ipc_hw_irq_clear(const uint8_t instance)
 		return;
 	}
 	/* clear MSCM core-to-core directed interrupt on the targeted core */
-	writel_relaxed(MSCM_IRCPnISRn_CPx_INT,
+	writel(MSCM_IRCPnISRn_CPx_INT,
 		&((priv[instance].mscm)->
 		ircpnirx[priv[instance].local_core][priv[instance].mscm_rx_irq].isr));
 }
diff --git a/hw/ipc-hw-s32gen1.c b/hw/ipc-hw-s32gen1.c
index e58bca1..29209c4 100644
--- a/hw/ipc-hw-s32gen1.c
+++ b/hw/ipc-hw-s32gen1.c
@@ -420,7 +420,7 @@ int _ipc_hw_init(const uint8_t instance, int tx_irq, int rx_irq,
 			&& ((tx_irq < IRQ_ID_MIN) || (tx_irq > IRQ_ID_MAX)))
 		|| (rx_irq < IRQ_ID_MIN || rx_irq > IRQ_ID_MAX)
 		|| (rx_irq == tx_irq)
-		|| (remote_core_idx == readl_relaxed(&(priv[instance].mscm->cpxnum)))
+		|| (remote_core_idx == readl(&(priv[instance].mscm->cpxnum)))
 		|| (remote_core_idx == local_core_idx)) {
 		return -EINVAL;
 	}
@@ -438,11 +438,11 @@ int _ipc_hw_init(const uint8_t instance, int tx_irq, int rx_irq,
 	 * enable local trusted cores so that they can read full contents of
 	 * IRCPnISRx registers
 	 */
-	ircpcfg_mask = readl_relaxed(&priv[instance].mscm->ircpcfg);
+	ircpcfg_mask = readl(&priv[instance].mscm->ircpcfg);
 	if (ircpcfg_mask & MSCM_IRCPCFG_LOCK)
 		return -EACCES;
 
-	writel_relaxed(ircpcfg_mask | local_core->trusted, &(priv[instance].mscm->ircpcfg));
+	writel(ircpcfg_mask | local_core->trusted, &(priv[instance].mscm->ircpcfg));
 
 	return 0;
 }
@@ -470,8 +470,8 @@ void ipc_hw_irq_enable(const uint8_t instance)
 	uint16_t irsprc_mask;
 
 	/* enable MSCM core-to-core interrupt routing */
-	irsprc_mask = readw_relaxed(&priv[instance].mscm->irsprc[priv[instance].mscm_rx_irq + 1]);
-	writew_relaxed(irsprc_mask | MSCM_IRSPRCn_GIC500,
+	irsprc_mask = readw(&priv[instance].mscm->irsprc[priv[instance].mscm_rx_irq + 1]);
+	writew(irsprc_mask | MSCM_IRSPRCn_GIC500,
 			&((priv[instance].mscm)->irsprc[priv[instance].mscm_rx_irq + 1]));
 }
 
@@ -491,8 +491,8 @@ void ipc_hw_irq_disable(const uint8_t instance)
 	}
 
 	/* disable MSCM core-to-core interrupt routing */
-	irsprc_mask = readw_relaxed(&priv[instance].mscm->irsprc[priv[instance].mscm_rx_irq + 1]);
-	writew_relaxed(irsprc_mask & ~MSCM_IRSPRCn_GIC500,
+	irsprc_mask = readw(&priv[instance].mscm->irsprc[priv[instance].mscm_rx_irq + 1]);
+	writew(irsprc_mask & ~MSCM_IRSPRCn_GIC500,
 			&((priv[instance].mscm)->irsprc[priv[instance].mscm_rx_irq + 1]));
 }
 
@@ -506,7 +506,7 @@ void ipc_hw_irq_notify(const uint8_t instance)
 	}
 
 	/* trigger MSCM core-to-core directed interrupt */
-	writel_relaxed(MSCM_IRCPnIGRn_INT_EN,
+	writel(MSCM_IRCPnIGRn_INT_EN,
 		&((priv[instance].mscm)->
 		ircpnirx[priv[instance].remote_core][priv[instance].mscm_tx_irq].igr));
 }
@@ -520,7 +520,7 @@ void ipc_hw_irq_clear(const uint8_t instance)
 		return;
 	}
 	/* clear MSCM core-to-core directed interrupt on the targeted core */
-	writel_relaxed(MSCM_IRCPnISRn_CPx_INT,
+	writel(MSCM_IRCPnISRn_CPx_INT,
 		&((priv[instance].mscm)->
 		ircpnirx[priv[instance].local_core][priv[instance].mscm_rx_irq].isr));
 }
diff --git a/hw/ipc-hw-s32v234.c b/hw/ipc-hw-s32v234.c
index 6c7aa22..74e492f 100644
--- a/hw/ipc-hw-s32v234.c
+++ b/hw/ipc-hw-s32v234.c
@@ -236,8 +236,8 @@ void ipc_hw_irq_enable(const uint8_t instance)
 	uint16_t irsprc_mask;
 
 	/* enable MSCM core-to-core interrupt routing */
-	irsprc_mask = readw_relaxed(&priv.mscm->irsprc[priv.mscm_rx_irq]);
-	writew_relaxed(irsprc_mask | MSCM_IRSPRCn_CPxE(A53),
+	irsprc_mask = readw(&priv.mscm->irsprc[priv.mscm_rx_irq]);
+	writew(irsprc_mask | MSCM_IRSPRCn_CPxE(A53),
 			&priv.mscm->irsprc[priv.mscm_rx_irq]);
 }
 
@@ -249,8 +249,8 @@ void ipc_hw_irq_disable(const uint8_t instance)
 	uint16_t irsprc_mask;
 
 	/* disable MSCM core-to-core interrupt routing */
-	irsprc_mask = readw_relaxed(&priv.mscm->irsprc[priv.mscm_rx_irq]);
-	writew_relaxed(irsprc_mask & ~MSCM_IRSPRCn_CPxE(A53),
+	irsprc_mask = readw(&priv.mscm->irsprc[priv.mscm_rx_irq]);
+	writew(irsprc_mask & ~MSCM_IRSPRCn_CPxE(A53),
 			&priv.mscm->irsprc[priv.mscm_rx_irq]);
 }
 
@@ -263,7 +263,7 @@ void ipc_hw_irq_notify(const uint8_t instance)
 		return;
 
 	/* trigger MSCM core-to-core directed interrupt */
-	writel_relaxed(MSCM_IRCPGIR_TLF(MSCM_IRCPGIR_TLF_CPUTL) |
+	writel(MSCM_IRCPGIR_TLF(MSCM_IRCPGIR_TLF_CPUTL) |
 			MSCM_IRCPGIR_CPUTL(priv.remote_core) |
 			MSCM_IRCPGIR_INTID(priv.mscm_tx_irq),
 			&priv.mscm->ircpgir);
@@ -275,6 +275,6 @@ void ipc_hw_irq_notify(const uint8_t instance)
 void ipc_hw_irq_clear(const uint8_t instance)
 {
 	/* clear MSCM core-to-core directed interrupt */
-	writel_relaxed(MSCM_IRCPxIR_INT(priv.mscm_rx_irq),
+	writel(MSCM_IRCPxIR_INT(priv.mscm_rx_irq),
 		       &priv.mscm->ircp1ir);
 }

